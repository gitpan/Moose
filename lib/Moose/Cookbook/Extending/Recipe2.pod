
=pod

=head1 NAME

Moose::Cookbook::Extending::Recipe2 - Providing a role for the base object class

=head1 SYNOPSIS

  package MooseX::Debugging;

  use Moose ();
  use Moose::Exporter;
  use Moose::Util::MetaRole;

  Moose::Exporter->setup_import_methods;

  sub init_meta {
      shift;
      my %options = @_;

      my $meta = Moose->init_meta(%options);

      Moose::Util::MetaRole::apply_base_class_roles(
          for_class => $options{for_class},
          roles     => ['MooseX::Debugging::Role::Object'],
      );

      return $meta;
  }

  package MooseX::Debugging::Role::Object;

  use Moose::Role;

  after 'BUILD' => sub {
      my $self = shift;

      warn "Made a new " . ref $self . " object\n";
  };

=head1 DESCRIPTION

In this example, we provide a role for the base object class that adds
some simple debugging output. Every time an object is created, it
spits out a warning saying what type of object it was.

Obviously, a real debugging role would do something more interesting,
but this recipe is all about how we apply that role.

In this case, with the combination of L<Moose::Exporter> and
L<Moose::Util::MetaRole>, we ensure that when a module does C<S<use
MooseX::Debugging>>, it automatically gets the debugging role applied
to its base object class.

There are a few pieces of code worth looking at more closely.

  Moose::Exporter->setup_import_methods;

This creates an C<import> method in the C<MooseX::Debugging>
package. Since we are not actually exporting anything, we do not pass
C<setup_import_methods> any parameters. However, we need to have an
C<import> method to ensure that our C<init_meta> method is called.

Then in our C<init_meta> method we have this line:

      Moose->init_meta(%options);

This is a bit of boilerplate that almost every extension will
use. This ensures that the caller has a normal Moose metaclass
I<before> we go and add traits to it.

The C<< Moose->init_meta >> method does ensures that the caller has a
sane metaclass, and we don't want to replicate that logic in our
extension. If the C<< Moose->init_meta >> was already called (because
the caller did C<S<use Moose>> before using our extension), then
calling C<< Moose->init_meta >> again is effectively a no-op.

=head1 AUTHOR

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

